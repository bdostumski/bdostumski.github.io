var store = [{
        "title": "HTTP (Hypertext Transfer Protocol)",
        "excerpt":"Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents.   Mozilla MDN Documentation   HTTP Methods      GET retrieves data.   POST creates resources.   PUT updates or creates a resource.   PATCH applies partial updates.   DELETE removes resources.   HEAD fetches headers - same as GET but does not return the body, only headers.   OPTIONS checks available methods - describe the communication options for the target resource.   CONNECT establishes a tunnel - establish a tunnel to the server, usually for SSL/TLS.   TRACE perform a message loop-back test along the path to the target resource.   HTTP Status Codes      1xx: Informational Resource - indicate that the request was received, and the process is continuing.            100 Continue: The server has received the request headers, and the client should proceed to send the request body.           2xx: Successful Responses - the action was successfully received, understood, and accepted.            200 OK: The request was successful.       201 CREATED: The request was successful, and a new resource was created.       204 No Content: The request was successful, but there is no content to send in the response.           3xx: Redirection Messages - further action needs to be taken to complete the request.            301 Moved Permanently: The resource has been moved to a new URL permanently.       302 Found: The resource has been found at a different URL, temporarily.       304 Not Modified: The resource has not been modified since the last request.           4xx: Client Error Responses - the request contains bad syntax or cannot be fulfilled.            400 Bad Request: The server could not understand the request due to invalid syntax.       401 Unauthorized: Authentication is required, and it has failed or has not been provided.       403 Forbidden: The server understood the request but refuses to authorize it.       404 Not Found: The requested resource could not be found on the server.       429 Too Many Requests: The user has sent too many requests in a given amount of time (‚Äúrate limiting‚Äù).           5xx: Server Error Responses - the server failed to fulfill a valid request.            500 Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request.       502 Bad Gateway: The server was acting as a gateway or proxy and received an invalid response from the upstream server.       503 Service Unavailable: The server is not ready to handle the request, often due to maintenance or overload.       504 Gateway Timeout: The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.           HTTP Headers   Common HTTP Headers      Accept - Informs the server about the media types the client can process            [ Accept: text/html, application/xhtml+xml ]           Accept-Encoding - Indicates the encoding algorithms (like gzip) the client supports (it reduces the size of the payload to 70% and can speed up the application by around 15% - it is very important when we have a large amount of data)            [ Accept-Encoding: gzip, deflate, br ]           Accept-Language - Specifies the preferred languages for the response            [ Accept-Language: en-US,en;q=0.5 ]           Content-Type - Specifies the media type of the resource, crucial for both requests and responses            [ Content-Type: application/json ]           Location - Used in redirects to indicate the new URL            [ Location: https://example.com/new-pag ]           Caching HTTP Headers      Cache-Control - Specifies caching policies, helping to improve load times and reduce server load            [ Cache-Control: no-cache, no-store, must-revalidate ]           ETag - Allows the server to identify the version of a resource to enable conditional requests and reduce bandwidth            [ ETag: ‚Äú12345‚Äù ]           Expires - Specifies an expiration date for cached resources            [ Expires: Wed, 21 Oct 2025 07:28:00 GMT ]           Authentication HTTP Headers      Basic Authentication - Basic Authentication encodes the username and password in Base64 and sends it in the header. It‚Äôs simple but insecure if not used over HTTPS            [ Authorization: Basic &lt; base64-encoded-username:password &gt; ]           Bearer Token Authentication - Bearer Token Authentication involves sending a token that authorizes the client to access resources. This is commonly used in OAuth 2.0.            [ Authorization: Bearer &lt; token &gt; ]           API Key Authentication - API Key Authentication uses a key passed in the request header to authenticate the request.            [ Authorization: ApiKey your-api-key ]           Digest Authentication - Digest Authentication is more secure than Basic Authentication. It involves a server-specified data set that is hashed and sent along with the username.            [ Authorization: Digest username=‚Äùuser‚Äù, realm=‚Äùexample.com‚Äù, nonce=‚Äùxyz‚Äù, uri=‚Äù/‚Äù, response=‚Äùabc123‚Äù ]           HMAC (Hash-Based Message Authentication Code) - HMAC involves hashing the request data and secret key together to generate a signature.            [ Authorization: HMAC username=‚Äùuser‚Äù, signature=‚Äùgenerated-signature‚Äù ]           Custom Token-Based Authentication - A custom token-based approach can use a custom header field to pass the token.            [ X-Auth-Token: your-custom-token ]           Notes:      HTTP - Always use HTTPS to encrypt the headers and protect sensitive information   Security - Avoid sending sensitive data like passwords in headers without encryption   Token Expiration - For token-based methods, consider token expiration and refresh mechanisms   Security Related HTTP Headers      Content Security Policy (CSP): - CSP helps prevent XSS attacks by controlling the sources from which the browser is allowed to load resources.            [ Content-Security-Policy: default-src ‚Äòself‚Äô; img-src ‚Äòself‚Äô https://example.com; script-src ‚Äònone‚Äô; ]           Cross-Origin Resource Policy (CORP): - CORP prevents a resource from being loaded by a document from a different origin unless explicitly allowed.            [ Cross-Origin-Resource-Policy: same-origin ]           Cross-Origin Opener Policy (COOP): - COOP isolates the browsing context, mitigating the risk of cross-origin attacks.            [ Cross-Origin-Opener-Policy: same-origin ]           Cross-Origin Embedder Policy (COEP): - COEP ensures that the document only loads cross-origin resources that grant permission.            [ Cross-Origin-Embedder-Policy: require-corp ]           DNS Prefetch Control: - Controls whether the browser prefetches DNS for links to reduce latency.            [ X-DNS-Prefetch-Control: off ]           Expect-CT: - Helps detect and prevent misissued SSL/TLS certificates.            [ DNS-Prefetch-Control: off ]           Feature Policy: Allows control over which features and APIs can be used in the browser.            [ Feature-Policy: geolocation ‚Äòself‚Äô; microphone ‚Äònone‚Äô ]           Frameguard: Prevents clickjacking attacks by controlling whether the browser can render your site in a frame.            [ X-Frame-Options: DENY ]           Hide Powered-By: Removes the X-Powered-By header to make it less obvious what technology the app is using.            [ X-Powered-By: ]           HSTS (HTTP Strict Transport Security): Forces the use of HTTPS to prevent man-in-the-middle attacks.            [ Strict-Transport-Security: max-age=31536000; includeSubDomains ]           IE No Open: Sets X-Download-Options to prevent Internet Explorer from executing downloads in the site‚Äôs context.            [ X-Download-Options: noopen ]           No Sniff: Helps prevent browsers from sniffing MIME types.            [ X-Content-Type-Options: nosniff ]           Referrer Policy: Controls the information sent in the Referer header.            [ Referrer-Policy: no-referrer ]           XSS Filter:  Enables the Cross-site scripting (XSS) filter built into most browsers.            [ X-XSS-Protection: 1; mode=block ]           CORS (Cross Origin Resource Sharing) HTTP Headers   Notes: CORS is a mechanism that allows web servers to specify who can access their resources from different origins (domains).      Access-Control-Allow-Origin: Specifies which origin(s) are allowed to access the resource. Can be a specific domain or * (to allow all domains).            [ Access-Control-Allow-Origin: https://example.com ]       [ Access-Control-Allow-Origin: * ]           Access-Control-Allow-Methods: Specifies which HTTP methods are allowed when accessing the resource.            [ Access-Control-Allow-Methods: GET, POST, PUT, DELETE ]           Access-Control-Allow-Headers: Lists the headers that are allowed to be used when making the request.            [ Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With ]           Access-Control-Allow-Credentials: Indicates whether credentials (like cookies) are allowed in the request.            [ Access-Control-Allow-Credentials: true ]           Access-Control-Max-Age: Specifies how long the results of a preflight request can be cached.            [ Access-Control-Max-Age: 86400 ]           ","categories": ["System Design"],
        "tags": ["Http"],
        "url": "/system%20design/post-http/",
        "teaser": null
      },{
    "title": "About Me",
    "excerpt":"My beginning in Computer Science ü§ì      Windows NT Inside View by David Solomon   MCSE Training Kit Windows 2000 Server Tom I, II by Microsoft Certified Professional   UNIX System Administrator‚Äôs Bible by Paul Iarrera   Visual Basic 6.0 Professional Step by Step Tom I, II by Michael Halvorson   Visual C++ 6.0 Tom I, II by Chuck Sphar   Teach Yourself C 3rd Edition by Herbert Schildt   Teach Yourself C++ by Herbert Schildt   Beginning PHP5, Apache, and MySQL Web Development¬†2nd Edition Tom I, II by Elizabeth Naramore, Jason Gerner, Yann Le Scouarnec, Jeremy Stolz, Michel K. Glass   More Books for Linux, JavaScript, jQuery, HTML, CSS   Technical Analysis: The Complete Resource for Financial Market Technicians¬†2nd ed. Edition by Charles D Kirkpatrick, Julie R Dahlquist   My 1999‚Äôs Computer Specifications (recovered by memory) ü§Ø      CPU: Intel Pentium III clock rate 533 MHz overclocked up to 733 MHz 256 KB L2 Cache   GPU: 3dfx Voodoo 3 32 bit 16 MB 143 MHz core clock speed   DDR SDRAM: DDR 64MB 200Mhz upgrade to DDR3 1024MB 800Mhz   HDD: SATA 6 Gb 5400 rpm upgraded to 100 Gb 5400 rpm   Network: Dial-up Connection, DSL Connection, Cable Internet Connection   Monitor: 15 inch Compaq   Drivers: FDD, CD-ROM, DVD-RW   OS: Windows 98 SE, Windows 2000 Server, Windows XP, Unix-like FreeBSD, Linux RedHat, Unix-like Debian  ","url": "http://localhost:4000/about/"
  },{
    "title": "Archive",
    "excerpt":" ","url": "http://localhost:4000/archive/"
  },{
    "title": "Categories",
    "excerpt":" ","url": "http://localhost:4000/categories/"
  },{
    "title": "Certificates",
    "excerpt":"  Telerik - Alpha Java Track   During 440+ hours of intensive training, I gain access to key practical knowledge and insights needed to become the next Java developer ‚Äî advanced Java, object-oriented programming, data structures and algorithms, high-quality code, unit testing, databases, front-end fundamentals, Spring MVC.   20% of the program was dedicated to polishing my soft skills. I develop the ability to manage feedback and expectations, ask the right questions, prioritize, and stick to high-value activities.   Certificate     Baeldung - Learning Spring      Module 1 ‚Äì Getting Started With Spring 5   Module 2 ‚Äì Dependency Injection and the Spring Context   Module 3 ‚Äì Project Configuration   Module 4 ‚Äì Deep Dive Into Spring Boot 2   Module 5 ‚Äì Persistence and Data Access   Module 6 ‚Äì Web Basics and Spring MVC   Module 7 ‚Äì Templating Engines and Spring MVC   Module 8 ‚Äì Building a REST API   Module 9 ‚Äì Advanced Features in Spring   Certificate   Baeldung - REST With Spring      Module 1 ‚Äì The Basics of REST with Spring   Module 2 ‚Äì REST and HTTP Semantics   Module 3 ‚Äì Simple Security for REST   Module 4 ‚Äì Consuming the API from Angular   Module 5 ‚Äì Testing the API   Module 6 ‚Äì Advanced API Security: OAuth2 &amp; JWT   Module 7 ‚Äì Document, Discover and Evolve the REST API   Module 8 ‚Äì Monitoring and API Metrics   Module 9 ‚Äì DevOps: CI and CD Pipelines, Deployment   Module 10 ‚Äì Advanced API Tactics   Module 11 ‚Äì A Reactive REST API   Module 12 ‚Äì New in Spring   Module 13 ‚Äì New in Spring MVC   Module 14 ‚Äì Spring Boot   Certificate   Baeldung - Spring Data JPA      Module 1 - Getting Started with Spring Data JPA   Module 2 - Spring Data Repositories   Module 3 - Spring Data Custom Queries with JPQL and native SQL   Module 4 - Pagination and Sorting   Module 5 - Alternate Querying Methods   Module 6 - Advanced Features   Certificate   Baeldung - Spring Security OAuth      Module 1 ‚Äì Intro to OAuth2 and the OAuth2 Roles   Module 2 ‚Äì The Basics of OAuth2   Module 3 ‚Äì OAuth2 Beyond the Basics - The Resource Server   Module 4 ‚Äì OAuth2 Beyond the Basics - The Client   Module 5 ‚Äì OAuth2 Beyond the Basics - Deep-Dives   Module 6 ‚Äì Microservices, Spring Security and OAuth2   Certificate   Baeldung - Spring Security Core      Module 1 ‚Äì Secure a Simple Spring MVC Application   Module 2 ‚Äì A Full Registration Flow   Module 3 ‚Äì Remember Me   Module 4 ‚Äì Spring Security on the Client   Module 5 ‚Äì Spring Security Expressions   Module 6 ‚Äì Password Storage   Module 7 ‚Äì Spring Security Advanced Configuration   Module 8 ‚Äì Advanced Authentication 1   Module 9 ‚Äì Advanced Authorization 2   Module 10 ‚Äì Basic REST API Security   Module 11 ‚Äì ACL with Spring Security   Module 12 ‚Äì Two-Factor Authentication   Module 13 ‚Äì Advanced Spring Security Scenarios   Module 14 ‚Äì Reactive Security   Certificate     Amigoscode - Full Stack (Proffesional)      Spring Boot Backend API   Front end with React.js Hooks and Functions Components   Maven Build Tool   Databases using Postgres on Docker   Spring Data JPA   Server and Client Side Error Handling   Packaging applications for deployment using Docker and Jib   Software Deployment Automation with GitHub Actions   Software Deployment Monitoring with Slack   Unit and Integration Testing   Certificate   Amigoscode - Microservices      Bootstrap With Maven   Create Microservices   Microservice Communication via HTTP   Service Discovery with Eureka   Open Feign   Distributed Tracing   API Gateway With Spring Cloud Gateway   Message Queues   RabbitMQ   Packaging Microservices to Runnable Jar   Packaging Jars to Docker Images   Kubernetes AKA k8s   Deploying Postgres RabbitMQ and Zipkin to k8s   Refactoring Microservices for k8s   Deploying Microservices to k8s   Managed Kubernetes Cluster with Linode   Kafka   Bringing Back API Gateway for Security   Security ‚Äì API Key Authentication   Certificate   Amigoscode - Terminal, Bash &amp; VIM      Terminal and Shell   Vim   Certificate   Amigoscode - Git and Github Essentials      What is Git   Setup Git   Git commits   Git branches   Git push   Git rebase   Git merge   GitHub   Pull Requests   Certificate   Amigoscode - Relational Database      Create Tables   Create Databases   CRUD operations   Filtering Data   Joins   Working with Dates   Aggregate Functions   Postgres Extensions   Sequences   Database Constraints   Certificate   Amigoscode - Upload Images using AWS      Spring Boot backend   React frontend   Amazon S3 to store files (images)   Amigoscode - Spring Security      Getting Started with Spring Security   Users Roles and Authorities   Permission-Based Authentication   Form-Based Authentication   Database Authentication   JSON Web Tokens   Certificate   Amigoscode - Spring Data MongoDB      Setup MongoDB running on Docker   MongoDB Collections and Documents   CRUD operations using MongoRepository   Queries using MongoTemplate   Indexes for unique constraints   Building a Restful API   Certificate   Amigoscode - Spring Boot      Overview of Spring Boot   Sring Web MVC   JSON for Java   Datbase Connectivity with Spring Data JPA   Building CRUD API   Build on practical experience   Certificate   Amigoscode - Functional Programming      What is Java Functional Programming   Pure Functions   Lambdas   Java Functional Interfaces: Function, Suppliers, Consummers Predicates   Java Combinator Pattern   Imperative vs Declarative   Java Streams API: Map, Filter, Reduce, Flatmap, Min, Max   Java Streams API: Map, Filter, Reduce, Flatmap, Min, Max   Java Streams API: Map, Filter, Reduce, Flatmap, Min, Max   Certificate     NetIT - Web Development   During my training, I was able to learn and use all the technologies I need to develop a complete web application like front-end, back-end, databases, CMS, and Web Server Administration.   Certificate     Udemy     Personal - Financial Markets Trading      First Steps of trading and terminology   Technical Analysis   Fundamental Analysis   Creating our Trading System            Trading Strategy. We looked at three different trading strategies       Statistics of the success of our strategy       Risk Management       Discipline           Back testing of our Trading System   How to keep a Trading Journal for later analysis   Certificate   Personal - In the footsteps of Aleko   Certificate   Personal - PostBank Donation Certificate   Certificate   Personal - First Aid   Certificate  ","url": "http://localhost:4000/certificates/"
  },{
    "title": "All Posts",
    "excerpt":"","url": "http://localhost:4000/posts/"
  },{
    "title": "Tags",
    "excerpt":"","url": "http://localhost:4000/tags/"
  }]
