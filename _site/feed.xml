<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-19T21:05:22+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CoreHub Blog</title><subtitle>Deep Dive Into Software Engineering Topics</subtitle><author><name>Borislav&lt;br/&gt;Dostumski</name></author><entry><title type="html">Session Cookies and Tokens</title><link href="http://localhost:4000/system%20design/post-session-cookies-tokens/" rel="alternate" type="text/html" title="Session Cookies and Tokens" /><published>2025-02-19T00:00:00+02:00</published><updated>2025-02-19T00:00:00+02:00</updated><id>http://localhost:4000/system%20design/post-session-cookies-tokens</id><content type="html" xml:base="http://localhost:4000/system%20design/post-session-cookies-tokens/"><![CDATA[<h2 id="what-is-a-session">What is a Session?</h2>

<p>A session is a temporary state maintained on the server that tracks a user’s activity across multiple requests. It typically stores user authentication details, preferences, or other data needed during an interaction.</p>

<h3 id="how-it-works">How It Works</h3>

<ul>
  <li>User logs in → Server creates a session (stores it in memory, database, or file).</li>
  <li>The server generates a session ID and sends it to the client in a cookie.</li>
  <li>The client sends the session ID on every request → Server retrieves session data.</li>
</ul>

<h2 id="what-is-a-cookie">What is a Cookie?</h2>

<p>A cookie is a small piece of data stored on the client (browser) and sent to the server with every request. It can store user preferences, authentication details, or tracking information.</p>

<h3 id="how-it-works-1">How It Works</h3>

<ul>
  <li>Server sends a Set-Cookie header → Browser stores the cookie.</li>
  <li>Browser sends the cookie with every subsequent request.</li>
</ul>

<h3 id="types-of-cookies">Types of Cookies</h3>

<ul>
  <li>Session Cookies: Deleted when the browser is closed.</li>
  <li>Persistent Cookies: Stored for a long time (set expiration date).</li>
  <li>Secure Cookies: Only sent over HTTPS.</li>
  <li>HttpOnly Cookies: Not accessible by JavaScript (prevents XSS attacks).</li>
  <li>SameSite Cookies: Prevents CSRF attacks by restricting cross-site requests.</li>
</ul>

<h2 id="what-is-a-token">What is a Token?</h2>

<p>A token is a cryptographic string used to authenticate users without storing state on the server. The most common type is JSON Web Token (JWT).</p>

<h3 id="how-it-works-2">How It Works</h3>

<ul>
  <li>User logs in → Server generates a JWT and sends it to the client.</li>
  <li>Client stores the JWT in localStorage, sessionStorage, or a cookie.</li>
  <li>The client sends the JWT with every request in the Authorization header.</li>
  <li>The server verifies the JWT using a secret key (HMAC) or public/private key pair (RSA).</li>
</ul>

<h2 id="comparison">Comparison</h2>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Session</th>
      <th>Cookies</th>
      <th>Tokens</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Definition</td>
      <td>A server-side mechanism to store user state.</td>
      <td>Small pieces of data stored in the browser.</td>
      <td>A cryptographic string used for authentication and authorization.</td>
    </tr>
    <tr>
      <td>Storage</td>
      <td>Stored on the server.</td>
      <td>Stored on the client (browser).</td>
      <td>Stored on the client but verified by the server.</td>
    </tr>
    <tr>
      <td>Security</td>
      <td>More secure (server-side).</td>
      <td>Less secure (can be stolen via XSS).</td>
      <td>More secure if implemented properly (e.g., JWT signed with HMAC or RSA).</td>
    </tr>
    <tr>
      <td>Persistence</td>
      <td>Lives as long as the session is active (until timeout or logout).</td>
      <td>Can be persistent (stored on disk) or session-based (deleted on close).</td>
      <td>Can be persistent, usually with an expiration time.</td>
    </tr>
    <tr>
      <td>Use Case</td>
      <td>Maintaining user authentication across multiple requests.</td>
      <td>Storing small amounts of client-side data like preferences or session IDs.</td>
      <td>API authentication (JWT), stateless authentication, Single Sign-On (SSO).</td>
    </tr>
    <tr>
      <td>Access Scope</td>
      <td>Server-only.</td>
      <td>Client-side but can be sent to the server.</td>
      <td>Client-side but verifiable by the server.</td>
    </tr>
    <tr>
      <td>Example</td>
      <td>PHP $_SESSION, Express express-session</td>
      <td>document.cookie = “user=John”</td>
      <td>JWT (eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9…)</td>
    </tr>
  </tbody>
</table>

<h2 id="how-they-work-together">How They Work Together</h2>

<ul>
  <li><strong>Session + Cookies:</strong> A session ID is stored in a cookie and sent with each request to maintain authentication.</li>
  <li><strong>Tokens (JWT) + Cookies:</strong> JWTs can be stored in cookies (HttpOnly for security) or localStorage/sessionStorage.</li>
  <li><strong>Tokens vs. Sessions:</strong> Sessions require server storage, while tokens (like JWT) allow stateless authentication.</li>
</ul>

<h2 id="best-practices">Best Practices</h2>

<h3 id="for-sessions">For Sessions</h3>

<ul>
  <li>Use secure cookies for session IDs (HttpOnly, Secure, SameSite=Strict).</li>
  <li>Regenerate session IDs on login to prevent session fixation.</li>
  <li>Set a timeout for inactive sessions.</li>
</ul>

<h3 id="for-cookies">For Cookies</h3>

<ul>
  <li>Use HttpOnly and Secure flags to prevent JavaScript access.</li>
  <li>Use SameSite=Strict or Lax to prevent CSRF attacks.</li>
  <li>Encrypt sensitive data (don’t store passwords in cookies).</li>
</ul>

<h3 id="for-tokens-jwt">For Tokens (JWT)</h3>

<ul>
  <li>Use short-lived tokens (e.g., 15 min) + refresh tokens.</li>
  <li>Store JWTs in HttpOnly cookies instead of localStorage.</li>
  <li>Sign JWTs with strong algorithms (HS256 for shared secret, RS256 for public/private key pairs).</li>
</ul>]]></content><author><name>Borislav&lt;br/&gt;Dostumski</name></author><category term="System Design" /><category term="Http" /><category term="OAuth" /><summary type="html"><![CDATA[What is a Session?]]></summary></entry><entry><title type="html">HTTP (Hypertext Transfer Protocol)</title><link href="http://localhost:4000/system%20design/post-http/" rel="alternate" type="text/html" title="HTTP (Hypertext Transfer Protocol)" /><published>2025-02-10T00:00:00+02:00</published><updated>2025-02-10T00:00:00+02:00</updated><id>http://localhost:4000/system%20design/post-http</id><content type="html" xml:base="http://localhost:4000/system%20design/post-http/"><![CDATA[<p>Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents.</p>

<p><a href="https://developer.mozilla.org/en-US/" target="_blank">Mozilla MDN Documentation</a></p>

<h2 id="http-methods">HTTP Methods</h2>

<ol>
  <li><strong>GET</strong> retrieves data.</li>
  <li><strong>POST</strong> creates resources.</li>
  <li><strong>PUT</strong> updates or creates a resource.</li>
  <li><strong>PATCH</strong> applies partial updates.</li>
  <li><strong>DELETE</strong> removes resources.</li>
  <li><strong>HEAD</strong> fetches headers - same as GET but does not return the body, only headers.</li>
  <li><strong>OPTIONS</strong> checks available methods - describe the communication options for the target resource.</li>
  <li><strong>CONNECT</strong> establishes a tunnel - establish a tunnel to the server, usually for SSL/TLS.</li>
  <li><strong>TRACE</strong> perform a message loop-back test along the path to the target resource.</li>
</ol>

<h2 id="http-status-codes">HTTP Status Codes</h2>

<ol>
  <li><strong>1xx: Informational Resource</strong> - indicate that the request was received, and the process is continuing.
    <ul>
      <li><strong>100 Continue:</strong> The server has received the request headers, and the client should proceed to send the request body.</li>
    </ul>
  </li>
  <li><strong>2xx: Successful Responses</strong> - the action was successfully received, understood, and accepted.
    <ul>
      <li><strong>200 OK:</strong> The request was successful.</li>
      <li><strong>201 CREATED:</strong> The request was successful, and a new resource was created.</li>
      <li><strong>204 No Content:</strong> The request was successful, but there is no content to send in the response.</li>
    </ul>
  </li>
  <li><strong>3xx: Redirection Messages</strong> - further action needs to be taken to complete the request.
    <ul>
      <li><strong>301 Moved Permanently:</strong> The resource has been moved to a new URL permanently.</li>
      <li><strong>302 Found:</strong> The resource has been found at a different URL, temporarily.</li>
      <li><strong>304 Not Modified:</strong> The resource has not been modified since the last request.</li>
    </ul>
  </li>
  <li><strong>4xx: Client Error Responses</strong> - the request contains bad syntax or cannot be fulfilled.
    <ul>
      <li><strong>400 Bad Request:</strong> The server could not understand the request due to invalid syntax.</li>
      <li><strong>401 Unauthorized:</strong> Authentication is required, and it has failed or has not been provided.</li>
      <li><strong>403 Forbidden:</strong> The server understood the request but refuses to authorize it.</li>
      <li><strong>404 Not Found:</strong> The requested resource could not be found on the server.</li>
      <li><strong>429 Too Many Requests:</strong> The user has sent too many requests in a given amount of time (“rate limiting”).</li>
    </ul>
  </li>
  <li><strong>5xx: Server Error Responses</strong> - the server failed to fulfill a valid request.
    <ul>
      <li><strong>500 Internal Server Error:</strong> The server encountered an unexpected condition that prevented it from fulfilling the request.</li>
      <li><strong>502 Bad Gateway:</strong> The server was acting as a gateway or proxy and received an invalid response from the upstream server.</li>
      <li><strong>503 Service Unavailable:</strong> The server is not ready to handle the request, often due to maintenance or overload.</li>
      <li><strong>504 Gateway Timeout:</strong> The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.</li>
    </ul>
  </li>
</ol>

<h2 id="http-headers">HTTP Headers</h2>

<h3 id="common-http-headers">Common HTTP Headers</h3>

<ol>
  <li><strong>Accept</strong> - Informs the server about the media types the client can process
    <ul>
      <li>[ Accept: text/html, application/xhtml+xml ]</li>
    </ul>
  </li>
  <li><strong>Accept-Encoding</strong> - Indicates the encoding algorithms (like gzip) the client supports (it reduces the size of the payload to 70% and can speed up the application by around 15% - it is very important when we have a large amount of data)
    <ul>
      <li>[ Accept-Encoding: gzip, deflate, br ]</li>
    </ul>
  </li>
  <li><strong>Accept-Language</strong> - Specifies the preferred languages for the response
    <ul>
      <li>[ Accept-Language: en-US,en;q=0.5 ]</li>
    </ul>
  </li>
  <li><strong>Content-Type</strong> - Specifies the media type of the resource, crucial for both requests and responses
    <ul>
      <li>[ Content-Type: application/json ]</li>
    </ul>
  </li>
  <li><strong>Location</strong> - Used in redirects to indicate the new URL
    <ul>
      <li>[ Location: https://example.com/new-pag ]</li>
    </ul>
  </li>
</ol>

<h3 id="caching-http-headers">Caching HTTP Headers</h3>

<ol>
  <li><strong>Cache-Control</strong> - Specifies caching policies, helping to improve load times and reduce server load
    <ul>
      <li>[ Cache-Control: no-cache, no-store, must-revalidate ]</li>
    </ul>
  </li>
  <li><strong>ETag</strong> - Allows the server to identify the version of a resource to enable conditional requests and reduce bandwidth
    <ul>
      <li>[ ETag: “12345” ]</li>
    </ul>
  </li>
  <li><strong>Expires</strong> - Specifies an expiration date for cached resources
    <ul>
      <li>[ Expires: Wed, 21 Oct 2025 07:28:00 GMT ]</li>
    </ul>
  </li>
</ol>

<h3 id="authentication-http-headers">Authentication HTTP Headers</h3>

<ol>
  <li><strong>Basic Authentication</strong> - Basic Authentication encodes the username and password in Base64 and sends it in the header. It’s simple but insecure if not used over HTTPS
    <ul>
      <li>[ Authorization: Basic &lt; base64-encoded-username:password &gt; ]</li>
    </ul>
  </li>
  <li><strong>Bearer Token Authentication</strong> - Bearer Token Authentication involves sending a token that authorizes the client to access resources. This is commonly used in OAuth 2.0.
    <ul>
      <li>[ Authorization: Bearer &lt; token &gt; ]</li>
    </ul>
  </li>
  <li><strong>API Key Authentication</strong> - API Key Authentication uses a key passed in the request header to authenticate the request.
    <ul>
      <li>[ Authorization: ApiKey your-api-key ]</li>
    </ul>
  </li>
  <li><strong>Digest Authentication</strong> - Digest Authentication is more secure than Basic Authentication. It involves a server-specified data set that is hashed and sent along with the username.
    <ul>
      <li>[ Authorization: Digest username=”user”, realm=”example.com”, nonce=”xyz”, uri=”/”, response=”abc123” ]</li>
    </ul>
  </li>
  <li><strong>HMAC (Hash-Based Message Authentication Code)</strong> - HMAC involves hashing the request data and secret key together to generate a signature.
    <ul>
      <li>[ Authorization: HMAC username=”user”, signature=”generated-signature” ]</li>
    </ul>
  </li>
  <li><strong>Custom Token-Based Authentication</strong> - A custom token-based approach can use a custom header field to pass the token.
    <ul>
      <li>[ X-Auth-Token: your-custom-token ]</li>
    </ul>
  </li>
</ol>

<p><strong>Notes:</strong></p>

<ul>
  <li><strong>HTTP</strong> - Always use HTTPS to encrypt the headers and protect sensitive information</li>
  <li><strong>Security</strong> - Avoid sending sensitive data like passwords in headers without encryption</li>
  <li><strong>Token Expiration</strong> - For token-based methods, consider token expiration and refresh mechanisms</li>
</ul>

<h3 id="security-related-http-headers">Security Related HTTP Headers</h3>

<ol>
  <li><strong>Content Security Policy (CSP):</strong> - CSP helps prevent XSS attacks by controlling the sources from which the browser is allowed to load resources.
    <ul>
      <li>[ Content-Security-Policy: default-src ‘self’; img-src ‘self’ https://example.com; script-src ‘none’; ]</li>
    </ul>
  </li>
  <li><strong>Cross-Origin Resource Policy (CORP):</strong> - CORP prevents a resource from being loaded by a document from a different origin unless explicitly allowed.
    <ul>
      <li>[ Cross-Origin-Resource-Policy: same-origin ]</li>
    </ul>
  </li>
  <li><strong>Cross-Origin Opener Policy (COOP):</strong> - COOP isolates the browsing context, mitigating the risk of cross-origin attacks.
    <ul>
      <li>[ Cross-Origin-Opener-Policy: same-origin ]</li>
    </ul>
  </li>
  <li><strong>Cross-Origin Embedder Policy (COEP):</strong> - COEP ensures that the document only loads cross-origin resources that grant permission.
    <ul>
      <li>[ Cross-Origin-Embedder-Policy: require-corp ]</li>
    </ul>
  </li>
  <li><strong>DNS Prefetch Control:</strong> - Controls whether the browser prefetches DNS for links to reduce latency.
    <ul>
      <li>[ X-DNS-Prefetch-Control: off ]</li>
    </ul>
  </li>
  <li><strong>Expect-CT:</strong> - Helps detect and prevent misissued <strong>SSL/TLS</strong> certificates.
    <ul>
      <li>[ DNS-Prefetch-Control: off ]</li>
    </ul>
  </li>
  <li><strong>Feature Policy:</strong> Allows control over which features and APIs can be used in the browser.
    <ul>
      <li>[ Feature-Policy: geolocation ‘self’; microphone ‘none’ ]</li>
    </ul>
  </li>
  <li><strong>Frameguard:</strong> Prevents clickjacking attacks by controlling whether the browser can render your site in a frame.
    <ul>
      <li>[ X-Frame-Options: DENY ]</li>
    </ul>
  </li>
  <li><strong>Hide Powered-By:</strong> Removes the X-Powered-By header to make it less obvious what technology the app is using.
    <ul>
      <li>[ X-Powered-By: ]</li>
    </ul>
  </li>
  <li><strong>HSTS (HTTP Strict Transport Security):</strong> Forces the use of HTTPS to prevent man-in-the-middle attacks.
    <ul>
      <li>[ Strict-Transport-Security: max-age=31536000; includeSubDomains ]</li>
    </ul>
  </li>
  <li><strong>IE No Open:</strong> Sets X-Download-Options to prevent Internet Explorer from executing downloads in the site’s context.
    <ul>
      <li>[ X-Download-Options: noopen ]</li>
    </ul>
  </li>
  <li><strong>No Sniff:</strong> Helps prevent browsers from sniffing MIME types.
    <ul>
      <li>[ X-Content-Type-Options: nosniff ]</li>
    </ul>
  </li>
  <li><strong>Referrer Policy:</strong> Controls the information sent in the Referer header.
    <ul>
      <li>[ Referrer-Policy: no-referrer ]</li>
    </ul>
  </li>
  <li><strong>XSS Filter:</strong>  Enables the Cross-site scripting (XSS) filter built into most browsers.
    <ul>
      <li>[ X-XSS-Protection: 1; mode=block ]</li>
    </ul>
  </li>
</ol>

<h3 id="cors-cross-origin-resource-sharing-http-headers">CORS (Cross Origin Resource Sharing) HTTP Headers</h3>

<p><strong>Notes:</strong> CORS is a mechanism that allows web servers to specify who can access their resources from different origins (domains).</p>

<ol>
  <li><strong>Access-Control-Allow-Origin:</strong> Specifies which origin(s) are allowed to access the resource. Can be a specific domain or * (to allow all domains).
    <ul>
      <li>[ Access-Control-Allow-Origin: https://example.com ]</li>
      <li>[ Access-Control-Allow-Origin: * ]</li>
    </ul>
  </li>
  <li><strong>Access-Control-Allow-Methods:</strong> Specifies which HTTP methods are allowed when accessing the resource.
    <ul>
      <li>[ Access-Control-Allow-Methods: GET, POST, PUT, DELETE ]</li>
    </ul>
  </li>
  <li><strong>Access-Control-Allow-Headers:</strong> Lists the headers that are allowed to be used when making the request.
    <ul>
      <li>[ Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With ]</li>
    </ul>
  </li>
  <li><strong>Access-Control-Allow-Credentials:</strong> Indicates whether credentials (like cookies) are allowed in the request.
    <ul>
      <li>[ Access-Control-Allow-Credentials: true ]</li>
    </ul>
  </li>
  <li><strong>Access-Control-Max-Age:</strong> Specifies how long the results of a preflight request can be cached.
    <ul>
      <li>[ Access-Control-Max-Age: 86400 ]</li>
    </ul>
  </li>
</ol>

<h1 id="session-cookies-and-tokens-differences-and-use-cases">Session, Cookies, and Tokens: Differences and Use Cases</h1>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Session</th>
      <th>Cookies</th>
      <th>Tokens</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Definition</td>
      <td>A server-side mechanism to store user state.</td>
      <td>Small pieces of data stored in the browser.</td>
      <td>A cryptographic string used for authentication and authorization.</td>
    </tr>
    <tr>
      <td>Storage</td>
      <td>Stored on the server.</td>
      <td>Stored on the client (browser).</td>
      <td>Stored on the client but verified by the server.</td>
    </tr>
    <tr>
      <td>Security</td>
      <td>More secure (server-side).</td>
      <td>Less secure (can be stolen via XSS).</td>
      <td>More secure if implemented properly (e.g., JWT signed with HMAC or RSA).</td>
    </tr>
    <tr>
      <td>Persistence</td>
      <td>Lives as long as the session is active (until timeout or logout).</td>
      <td>Can be persistent (stored on disk) or session-based (deleted on close).</td>
      <td>Can be persistent, usually with an expiration time.</td>
    </tr>
    <tr>
      <td>Use Case</td>
      <td>Maintaining user authentication across multiple requests.</td>
      <td>Storing small amounts of client-side data like preferences or session IDs.</td>
      <td>API authentication (JWT), stateless authentication, Single Sign-On (SSO).</td>
    </tr>
    <tr>
      <td>Access Scope</td>
      <td>Server-only.</td>
      <td>Client-side but can be sent to the server.</td>
      <td>Client-side but verifiable by the server.</td>
    </tr>
    <tr>
      <td>Example</td>
      <td>PHP $_SESSION, Express express-session</td>
      <td>document.cookie = “user=John”</td>
      <td>JWT (eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9…)</td>
    </tr>
  </tbody>
</table>

<h3 id="how-they-work-together">How They Work Together</h3>

<ul>
  <li><strong>Session + Cookies:</strong> A session ID is stored in a cookie and sent with each request to maintain authentication.</li>
  <li><strong>Tokens (JWT) + Cookies:</strong> JWTs can be stored in cookies (HttpOnly for security) or localStorage/sessionStorage.</li>
  <li><strong>Tokens vs. Sessions:</strong> Sessions require server storage, while tokens (like JWT) allow stateless authentication.</li>
</ul>]]></content><author><name>Borislav&lt;br/&gt;Dostumski</name></author><category term="System Design" /><category term="Http" /><summary type="html"><![CDATA[Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents.]]></summary></entry></feed>